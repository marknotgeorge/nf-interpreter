//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#include "nanoFramework_Hardware_Esp32_Rmt.h"
#include "nanoFramework_Hardware_Esp32_Rmt_nanoFramework_Hardware_Esp32_Rmt_BaseRmtChannel.h"

using namespace nanoFramework::Hardware::Esp32::Rmt;


HRESULT Library_nanoFramework_Hardware_Esp32_Rmt_nanoFramework_Hardware_Esp32_Rmt_BaseRmtChannel::NativeDispose___STATIC__VOID__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        BaseRmtChannel::NativeDispose( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_Rmt_nanoFramework_Hardware_Esp32_Rmt_BaseRmtChannel::NativeGetChannelStatus___STATIC__I4__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        signed int retVal = BaseRmtChannel::NativeGetChannelStatus( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_Rmt_nanoFramework_Hardware_Esp32_Rmt_BaseRmtChannel::NativeGetClockDivider___STATIC__U1__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        unsigned char retVal = BaseRmtChannel::NativeGetClockDivider( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT8( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_Rmt_nanoFramework_Hardware_Esp32_Rmt_BaseRmtChannel::NativeGetMemoryBlockNumber___STATIC__U1__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        unsigned char retVal = BaseRmtChannel::NativeGetMemoryBlockNumber( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT8( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_Rmt_nanoFramework_Hardware_Esp32_Rmt_BaseRmtChannel::NativeGetMemoryLowPower___STATIC__BOOLEAN__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        bool retVal = BaseRmtChannel::NativeGetMemoryLowPower( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_Rmt_nanoFramework_Hardware_Esp32_Rmt_BaseRmtChannel::NativeGetSourceClock___STATIC__I4__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        signed int retVal = BaseRmtChannel::NativeGetSourceClock( param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_Rmt_nanoFramework_Hardware_Esp32_Rmt_BaseRmtChannel::NativeSetClockDivider___STATIC__VOID__I4__U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        unsigned char param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8( stack, 1, param1 ) );

        BaseRmtChannel::NativeSetClockDivider( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_Rmt_nanoFramework_Hardware_Esp32_Rmt_BaseRmtChannel::NativeSetMemoryBlockNumber___STATIC__VOID__I4__U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        unsigned char param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT8( stack, 1, param1 ) );

        BaseRmtChannel::NativeSetMemoryBlockNumber( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_Rmt_nanoFramework_Hardware_Esp32_Rmt_BaseRmtChannel::NativeSetMemoryLowPower___STATIC__VOID__I4__BOOLEAN( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        bool param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_bool( stack, 1, param1 ) );

        BaseRmtChannel::NativeSetMemoryLowPower( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_Rmt_nanoFramework_Hardware_Esp32_Rmt_BaseRmtChannel::NativeSetSourceClock___STATIC__VOID__I4__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param1 ) );

        BaseRmtChannel::NativeSetSourceClock( param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}
